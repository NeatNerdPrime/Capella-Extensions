
=== HEADER ===

  table
    row
      
        Specification File of 
        [query: .aqlFeatureAccess(self, 'name')]
      
    
  
=== BODY ===

  Specification File of 
  [query: .aqlFeatureAccess(self, 'name')]
  Document generated automatically by M2Doc from Capella model of the system
Table of Contents
  [query: .asPagination('newTableOfContent')]
  Description of the system Missions
  
  if .greaterThan(->size(.eAllContents(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedMissionPkg'), Mission)), 0) then
    
    if .greaterThan(->size(.eAllContents(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedMissionPkg'), MissionPkg)), 0) then
      The system Missions are sorted in the following packages:
      table
        row
          
            Mission package
          
            Missions
          
        row
          
            [query: .aqlFeatureAccess(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedMissionPkg'), 'name')]
          
            
            for mission | .aqlFeatureAccess(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedMissionPkg'), 'ownedMissions') do
              [query: .asBookmarkRef(.aqlFeatureAccess(mission, 'name'), .aqlFeatureAccess(mission, 'id'))]
            endfor
            
          
        
      
      for package | .eAllContents(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedMissionPkg'), MissionPkg) do
        table
          row
            
              [query: .aqlFeatureAccess(package, 'name')]
            
              
              for mission | .aqlFeatureAccess(package, 'ownedMissions') do
                [query: .asBookmarkRef(.aqlFeatureAccess(mission, 'name'), .aqlFeatureAccess(mission, 'id'))]
              endfor
              
            
          
      endfor
      
    endif
    
    
    for mission | .eAllContents(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedMissionPkg'), Mission) do
      Mission : 
      [query: .asBookmark(.aqlFeatureAccess(mission, 'name'), .aqlFeatureAccess(mission, 'id'))]
      Description:
      
      if .differs(.aqlFeatureAccess(mission, 'description'), null) then
        [query: .fromHTMLBodyString(.aqlFeatureAccess(mission, 'description'))]
      else
        No description
      endif
      
      Involved actors:
      
      if .greaterThan(->size(->select(.aqlFeatureAccess(mission, 'involvedSystemComponents'), sc = .aqlFeatureAccess(mission, 'involvedSystemComponents') | .aqlFeatureAccess(sc, 'actor'))), 0) then
        
        for actor | ->select(.aqlFeatureAccess(mission, 'involvedSystemComponents'), sc = .aqlFeatureAccess(mission, 'involvedSystemComponents') | .aqlFeatureAccess(sc, 'actor')) do
          [query: .asBookmarkRef(.aqlFeatureAccess(actor, 'name'), .aqlFeatureAccess(actor, 'id'))]
        endfor
        
      else
        No actor involved
      endif
      
      Exploited capabilities:
      
      if .greaterThan(->size(.aqlFeatureAccess(mission, 'exploitedCapabilities')), 0) then
        
        for capability | .aqlFeatureAccess(mission, 'exploitedCapabilities') do
          Capability : 
          [query: .asBookmark(.aqlFeatureAccess(capability, 'name'), .aqlFeatureAccess(capability, 'id'))]
          Description:
          
          if .differs(.aqlFeatureAccess(capability, 'description'), null) then
            [query: .fromHTMLBodyString(.aqlFeatureAccess(capability, 'description'))]
          else
            No description
          endif
          
          Capability inclusion relations:
          table
            row
              
                Including capabilities
              
                Current capability
              
                Included capabilities
              
            row
              
                
                if .greaterThan(->size(.aqlFeatureAccess(capability, 'includingAbstractCapabilities')), 0) then
                  
                  for cap | .aqlFeatureAccess(capability, 'includingAbstractCapabilities') do
                    [query: .asBookmarkRef(.aqlFeatureAccess(cap, 'name'), .aqlFeatureAccess(cap, 'id'))]
                  endfor
                  
                else
                  No including capability
                endif
                
              
                [query: .aqlFeatureAccess(capability, 'name')]
              
                
                if .greaterThan(->size(.aqlFeatureAccess(capability, 'includedAbstractCapabilities')), 0) then
                  
                  for cap | .aqlFeatureAccess(capability, 'includedAbstractCapabilities') do
                    [query: .asBookmarkRef(.aqlFeatureAccess(cap, 'name'), .aqlFeatureAccess(cap, 'id'))]
                  endfor
                  
                else
                  No included capability
                endif
                
              
            
          Capability extension relations:
          table
            row
              
                Extended capabilities
              
                Current capability
              
                Extending capabilities
              
            row
              
                
                if .greaterThan(->size(.aqlFeatureAccess(capability, 'extendedAbstractCapabilities')), 0) then
                  
                  for cap | .aqlFeatureAccess(capability, 'extendedAbstractCapabilities') do
                    [query: .asBookmarkRef(.aqlFeatureAccess(cap, 'name'), .aqlFeatureAccess(cap, 'id'))]
                  endfor
                  
                else
                  No extended capability
                endif
                
              
                [query: .aqlFeatureAccess(capability, 'name')]
              
                
                if .greaterThan(->size(.aqlFeatureAccess(capability, 'extendingAbstractCapabilities')), 0) then
                  
                  for cap | .aqlFeatureAccess(capability, 'extendingAbstractCapabilities') do
                    [query: .asBookmarkRef(.aqlFeatureAccess(cap, 'name'), .aqlFeatureAccess(cap, 'id'))]
                  endfor
                  
                else
                  No extending capability
                endif
                
              
            
          Capability generalization relations:
          table
            row
              
                Super capabilities
              
                Current capability
              
                Sub capabilities
              
            row
              
                
                if .greaterThan(->size(.aqlFeatureAccess(capability, 'super')), 0) then
                  
                  for cap | .aqlFeatureAccess(capability, 'super') do
                    [query: .asBookmarkRef(.aqlFeatureAccess(cap, 'name'), .aqlFeatureAccess(cap, 'id'))]
                  endfor
                  
                else
                  No super capability
                endif
                
              
                [query: .aqlFeatureAccess(capability, 'name')]
              
                
                if .greaterThan(->size(.aqlFeatureAccess(capability, 'sub')), 0) then
                  
                  for cap | .aqlFeatureAccess(capability, 'sub') do
                    [query: .asBookmarkRef(.aqlFeatureAccess(cap, 'name'), .aqlFeatureAccess(cap, 'id'))]
                  endfor
                  
                else
                  No sub capability
                endif
                
              
            
          Involved functions:
          
          if .greaterThan(->size(.aqlFeatureAccess(capability, 'involvedAbstractFunctions')), 0) then
            
            for SF | .aqlFeatureAccess(capability, 'involvedAbstractFunctions') do
              [query: .asBookmarkRef(.aqlFeatureAccess(SF, 'name'), .aqlFeatureAccess(SF, 'id'))]
            endfor
            
          else
            No involved function
          endif
          
          Involved functional chains:
          
          if .greaterThan(->size(.aqlFeatureAccess(capability, 'involvedFunctionalChains')), 0) then
            
            for FC | .aqlFeatureAccess(capability, 'involvedFunctionalChains') do
              [query: .asBookmarkRef(.aqlFeatureAccess(FC, 'name'), .aqlFeatureAccess(FC, 'id'))]
            endfor
            
          else
            No involved functional chain
          endif
          
          
          if .isRepresentationDescriptionName(capability, 'System Data Flow Blank') then
            [query: .setWidth(->first(.asImageByRepresentationDescriptionName(capability, 'System Data Flow Blank')), 400)]
          endif
          
          Involved actors:
          
          if .greaterThan(->size(->select(.aqlFeatureAccess(capability, 'involvedSystemComponents'), sc = .aqlFeatureAccess(capability, 'involvedSystemComponents') | .aqlFeatureAccess(sc, 'actor'))), 0) then
            
            for actor | ->select(.aqlFeatureAccess(capability, 'involvedSystemComponents'), sc = .aqlFeatureAccess(capability, 'involvedSystemComponents') | .aqlFeatureAccess(sc, 'actor')) do
              [query: .asBookmarkRef(.aqlFeatureAccess(actor, 'name'), .aqlFeatureAccess(actor, 'id'))]
            endfor
            
          else
            No involved actor
          endif
          
          Available in modes and states:
          
          if .greaterThan(->size(.aqlFeatureAccess(capability, 'availableInStates')), 0) then
            
            for state | .aqlFeatureAccess(capability, 'availableInStates') do
              [query: .aqlFeatureAccess(state, 'name')]
            endfor
            
          else
            No state or mode availability defined
          endif
          
          Involved scenarios:
          
          if .greaterThan(->size(.aqlFeatureAccess(capability, 'ownedScenarios')), 0) then
            
            for scenario | .aqlFeatureAccess(capability, 'ownedScenarios') do
              [query: .asBookmarkRef(.aqlFeatureAccess(scenario, 'name'), .aqlFeatureAccess(scenario, 'id'))]
            endfor
            
          else
            No involved scenario
          endif
          
        endfor
        
      else
        No exploited capability
      endif
      
    endfor
    
  else
    No mission defined
  endif
  
  Description of the system Capabilities
  
  for package | .aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'containedCapabilityPkg') do
    
    for im | .asImageByRepresentationDescriptionName(package, 'Missions Capabilities Blank') do
      [query: .setWidth(im, 400)]
    endfor
    
  endfor
  
  
  if .greaterThan(->size(.eAllContents(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'containedCapabilityPkg'), Capability)), 0) then
    
    if .greaterThan(->size(.eAllContents(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'containedCapabilityPkg'), CapabilityPkg)), 0) then
      The system Capabilities are sorted in the following packages:
      table
        row
          
            Capability package
          
            Capabilities
          
        row
          
            [query: .aqlFeatureAccess(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'containedCapabilityPkg'), 'name')]
          
            
            for capability | .aqlFeatureAccess(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'containedCapabilityPkg'), 'ownedCapabilities') do
              [query: .asBookmarkRef(.aqlFeatureAccess(capability, 'name'), .aqlFeatureAccess(capability, 'id'))]
            endfor
            
          
        
      
      for package | .eAllContents(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'containedCapabilityPkg'), CapabilityPkg) do
        table
          row
            
              [query: .aqlFeatureAccess(package, 'name')]
            
              
              for capability | .aqlFeatureAccess(package, 'ownedCapabilities') do
                [query: .asBookmarkRef(.aqlFeatureAccess(capability, 'name'), .aqlFeatureAccess(capability, 'id'))]
              endfor
              
            
          
      endfor
      
    endif
    
    
    for capability | .eAllContents(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'containedCapabilityPkg'), Capability) do
    endfor
    
  else
    No capability defined
  endif
  
  Description of the System and its EnvironmentArchitecture Blank Diagrams
  
  for im | .asImageByRepresentationDescriptionName(.aqlFeatureAccess(->closure(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedSystemComponentPkg'), cPkg = .aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedSystemComponentPkg') | .aqlFeatureAccess(cPkg, 'ownedSystemComponentPkgs')), 'ownedSystemComponents'), 'System Architecture Blank') do
    [query: .setWidth(im, 400)]
  endfor
  
  
  for sys | ->select(.aqlFeatureAccess(->closure(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedSystemComponentPkg'), cPkg = .aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedSystemComponentPkg') | .aqlFeatureAccess(cPkg, 'ownedSystemComponentPkgs')), 'ownedSystemComponents'), sComp = .aqlFeatureAccess(->closure(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedSystemComponentPkg'), cPkg = .aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedSystemComponentPkg') | .aqlFeatureAccess(cPkg, 'ownedSystemComponentPkgs')), 'ownedSystemComponents') | .not(.aqlFeatureAccess(sComp, 'actor'))) do
    System: 
    [query: .asBookmark(.aqlFeatureAccess(sys, 'name'), .aqlFeatureAccess(sys, 'id'))]
    Modes & State Machines:
    
    if ->notEmpty(.aqlFeatureAccess(sys, 'ownedStateMachines')) then
      
      for stateMachine | .aqlFeatureAccess(sys, 'ownedStateMachines') do
        [query: .aqlFeatureAccess(stateMachine, 'name')]
        
        if .and(->notEmpty(.aqlFeatureAccess(stateMachine, 'ownedRegions')), .isRepresentationDescriptionName(->first(.aqlFeatureAccess(stateMachine, 'ownedRegions')), 'Modes & States')) then
          
          for im | .asImageByRepresentationDescriptionName(->first(.aqlFeatureAccess(stateMachine, 'ownedRegions')), 'Modes & States') do
            [query: .setWidth(im, 400)]
          endfor
          
        else
          
          if .and(->notEmpty(.aqlFeatureAccess(stateMachine, 'ownedRegions')), .isRepresentationDescriptionName(->first(.aqlFeatureAccess(stateMachine, 'ownedRegions')), 'Mode State Machine')) then
            
            for im | .asImageByRepresentationDescriptionName(->first(.aqlFeatureAccess(stateMachine, 'ownedRegions')), 'Mode State Machine') do
              [query: .setWidth(im, 400)]
            endfor
            
          endif
          
        endif
        
      endfor
      
    else
      No modes & states machine
    endif
    
    Allocated functions:
    
    if .greaterThan(->size(.aqlFeatureAccess(sys, 'allocatedFunctions')), 0) then
      
      for SF | .aqlFeatureAccess(sys, 'allocatedFunctions') do
        [query: .asBookmarkRef(.aqlFeatureAccess(SF, 'name'), .aqlFeatureAccess(SF, 'id'))]
      endfor
      
    else
      No allocated function
    endif
    
  endfor
  
  
  for actor | ->select(.aqlFeatureAccess(->closure(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedSystemComponentPkg'), cPkg = .aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedSystemComponentPkg') | .aqlFeatureAccess(cPkg, 'ownedSystemComponentPkgs')), 'ownedSystemComponents'), sComp = .aqlFeatureAccess(->closure(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedSystemComponentPkg'), cPkg = .aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedSystemComponentPkg') | .aqlFeatureAccess(cPkg, 'ownedSystemComponentPkgs')), 'ownedSystemComponents') | .aqlFeatureAccess(sComp, 'actor')) do
    Actor: 
    [query: .asBookmark(.aqlFeatureAccess(actor, 'name'), .aqlFeatureAccess(actor, 'id'))]
    Modes & State Machines:
    
    if ->notEmpty(.aqlFeatureAccess(actor, 'ownedStateMachines')) then
      
      for stateMachine | .aqlFeatureAccess(actor, 'ownedStateMachines') do
        [query: .aqlFeatureAccess(stateMachine, 'name')]
        
        if .and(->notEmpty(.aqlFeatureAccess(stateMachine, 'ownedRegions')), .isRepresentationDescriptionName(->first(.aqlFeatureAccess(stateMachine, 'ownedRegions')), 'Modes & States')) then
          
          for im | .asImageByRepresentationDescriptionName(->first(.aqlFeatureAccess(stateMachine, 'ownedRegions')), 'Modes & States') do
            [query: .setWidth(im, 400)]
          endfor
          
        else
          
          if .and(->notEmpty(.aqlFeatureAccess(stateMachine, 'ownedRegions')), .isRepresentationDescriptionName(->first(.aqlFeatureAccess(stateMachine, 'ownedRegions')), 'Mode State Machine')) then
            
            for im | .asImageByRepresentationDescriptionName(->first(.aqlFeatureAccess(stateMachine, 'ownedRegions')), 'Mode State Machine') do
              [query: .setWidth(im, 400)]
            endfor
            
          endif
          
        endif
        
      endfor
      
    else
      No modes & states machine
    endif
    
    Allocated functions:
    
    if .greaterThan(->size(.aqlFeatureAccess(actor, 'allocatedFunctions')), 0) then
      
      for SF | .aqlFeatureAccess(actor, 'allocatedFunctions') do
        [query: .asBookmarkRef(.aqlFeatureAccess(SF, 'name'), .aqlFeatureAccess(SF, 'id'))]
      endfor
      
    else
      No allocated function
    endif
    
  endfor
  
  Description of the Functions
  
  if .greaterThan(->size(.eAllContents(.aqlFeatureAccess(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'containedSystemFunctionPkg'), 'ownedSystemFunctions'), SystemFunction)), 0) then
    The Functions are sorted in the following packages:
    table
      row
        
          Parent element
        
          Function package
        
          Contained functions
        
      row
        
          [query: .aqlFeatureAccess(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'containedSystemFunctionPkg'), 'name')]
        
          
          for package | .aqlFeatureAccess(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'containedSystemFunctionPkg'), 'ownedSystemFunctions') do
            [query: .asBookmark(.aqlFeatureAccess(package, 'name'), .aqlFeatureAccess(package, 'id'))]
          endfor
          
        
          
          for SF | .aqlFeatureAccess(.aqlFeatureAccess(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'containedSystemFunctionPkg'), 'ownedSystemFunctions'), 'containedSystemFunctions') do
            [query: .asBookmarkRef(.aqlFeatureAccess(SF, 'name'), .aqlFeatureAccess(SF, 'id'))]
          endfor
          
        
      
    
    for package | .eAllContents(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'containedSystemFunctionPkg'), SystemFunctionPkg) do
      table
        row
          
            [query: .asBookmarkRef(.aqlFeatureAccess(.eContainer(package, NamedElement), 'name'), .aqlFeatureAccess(.eContainer(package, NamedElement), 'id'))]
          
            [query: .asBookmark(.aqlFeatureAccess(package, 'name'), .aqlFeatureAccess(package, 'id'))]
          
            
            for SF | .aqlFeatureAccess(package, 'ownedSystemFunctions') do
              [query: .asBookmarkRef(.aqlFeatureAccess(SF, 'name'), .aqlFeatureAccess(SF, 'id'))]
            endfor
            
          
        
    endfor
    
    
    for SF | .eAllContents(.aqlFeatureAccess(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'containedSystemFunctionPkg'), 'ownedSystemFunctions'), SystemFunction) do
      Function: 
      [query: .asBookmark(.aqlFeatureAccess(SF, 'name'), .aqlFeatureAccess(SF, 'id'))]
      Description:
      
      if .differs(.aqlFeatureAccess(SF, 'description'), null) then
        [query: .fromHTMLBodyString(.aqlFeatureAccess(SF, 'description'))]
      else
        No description
      endif
      
      Parent / Children functions:
      table
        row
          
            Parent function
          
            Current function
          
            Children functions
          
        row
          
            [query: .asBookmarkRef(.aqlFeatureAccess(.eContainer(SF, NamedElement), 'name'), .aqlFeatureAccess(.eContainer(SF, NamedElement), 'id'))]
          
            [query: .aqlFeatureAccess(SF, 'name')]
          
            
            if .greaterThan(->size(.aqlFeatureAccess(SF, 'subFunctions')), 0) then
              
              for children | .aqlFeatureAccess(SF, 'subFunctions') do
                [query: .asBookmarkRef(.aqlFeatureAccess(children, 'name'), .aqlFeatureAccess(children, 'id'))]
              endfor
              
            else
              No children function
            endif
            
          
        
      List of inputs:
      
      if .greaterThan(->size(.aqlFeatureAccess(SF, 'incoming')), 0) then
        table
          row
            
              Incoming functional exchange
            
              Exchanged items
            
          
        
        for fe | ->filter(.aqlFeatureAccess(SF, 'incoming'), FunctionalExchange) do
          table
            row
              
                [query: .aqlFeatureAccess(fe, 'name')]
              
                
                if .greaterThan(->size(.aqlFeatureAccess(fe, 'exchangedItems')), 0) then
                  
                  for ei | .aqlFeatureAccess(fe, 'exchangedItems') do
                    [query: .asBookmarkRef(.aqlFeatureAccess(ei, 'name'), .aqlFeatureAccess(ei, 'id'))]
                  endfor
                  
                else
                  No exchanged item
                endif
                
              
            
        endfor
        
      else
        No input
      endif
      
      List of outputs:
      
      if .greaterThan(->size(.aqlFeatureAccess(SF, 'outgoing')), 0) then
        table
          row
            
              Outgoing functional exchange
            
              Exchanged items
            
          
        
        for fe | ->filter(.aqlFeatureAccess(SF, 'outgoing'), FunctionalExchange) do
          table
            row
              
                [query: .aqlFeatureAccess(fe, 'name')]
              
                
                if .greaterThan(->size(.aqlFeatureAccess(fe, 'exchangedItems')), 0) then
                  
                  for ei | .aqlFeatureAccess(fe, 'exchangedItems') do
                    [query: .asBookmarkRef(.aqlFeatureAccess(ei, 'name'), .aqlFeatureAccess(ei, 'id'))]
                  endfor
                  
                else
                  No exchanged item
                endif
                
              
            
        endfor
        
      else
        No output
      endif
      
      Participation to functional chains:
      
      if .greaterThan(->size(.aqlFeatureAccess(SF, 'involvingFunctionalChains')), 0) then
        
        for FC | .aqlFeatureAccess(SF, 'involvingFunctionalChains') do
          [query: .asBookmarkRef(.aqlFeatureAccess(FC, 'name'), .aqlFeatureAccess(FC, 'id'))]
        endfor
        
      else
        None
      endif
      
      Allocated to:
      
      if .greaterThan(->size(->select(.aqlFeatureAccess(SF, 'allocatingSystemComponents'), sComp = .aqlFeatureAccess(SF, 'allocatingSystemComponents') | .not(.aqlFeatureAccess(sComp, 'actor')))), 0) then
        
        for sys | ->select(.aqlFeatureAccess(SF, 'allocatingSystemComponents'), sComp = .aqlFeatureAccess(SF, 'allocatingSystemComponents') | .not(.aqlFeatureAccess(sComp, 'actor'))) do
          [query: .asBookmarkRef(.aqlFeatureAccess(sys, 'name'), .aqlFeatureAccess(sys, 'id'))]
        endfor
        
      else
        
        if .greaterThan(->size(->select(.aqlFeatureAccess(SF, 'allocatingSystemComponents'), sComp = .aqlFeatureAccess(SF, 'allocatingSystemComponents') | .aqlFeatureAccess(sComp, 'actor'))), 0) then
          
          for act | ->select(.aqlFeatureAccess(SF, 'allocatingSystemComponents'), sComp = .aqlFeatureAccess(SF, 'allocatingSystemComponents') | .aqlFeatureAccess(sComp, 'actor')) do
            [query: .asBookmarkRef(.aqlFeatureAccess(act, 'name'), .aqlFeatureAccess(act, 'id'))]
          endfor
          
        else
          Function not allocated
        endif
        
      endif
      
    endfor
    
  else
    No function defined
  endif
  
  Description of the Functional Chains
  
  if .greaterThan(->size(.eAllContents(.aqlFeatureAccess(self, 'containedSystemAnalysis'), FunctionalChain)), 0) then
    
    for FC | .eAllContents(.aqlFeatureAccess(self, 'containedSystemAnalysis'), FunctionalChain) do
      Functional Chain : 
      [query: .asBookmark(.aqlFeatureAccess(FC, 'name'), .aqlFeatureAccess(FC, 'id'))]
      
      if .isRepresentationDescriptionName(FC, 'Functional Chain Description') then
        This functional chain is illustrated by the following diagram:
        [query: .setWidth(->first(.asImageByRepresentationDescriptionName(FC, 'Functional Chain Description')), 400)]
      endif
      
      Description:
      
      if .differs(.aqlFeatureAccess(FC, 'description'), null) then
        [query: .fromHTMLBodyString(.aqlFeatureAccess(FC, 'description'))]
      else
        No description
      endif
      
      Involved elements:
      
      if .greaterThan(->size(.aqlFeatureAccess(FC, 'involvedFunctions')), 0) then
        This functional chain involves the following elements:
        table
          row
            
              Functional exchange
            
              Source function
            
              Target function
            
          
        
        for FE | .aqlFeatureAccess(FC, 'involvedFunctionalExchanges') do
          table
            row
              
                [query: .aqlFeatureAccess(FE, 'name')]
              
                [query: .asBookmarkRef(.aqlFeatureAccess(.eContainer(.aqlFeatureAccess(FE, 'source'), NamedElement), 'name'), .aqlFeatureAccess(.eContainer(.aqlFeatureAccess(FE, 'source'), NamedElement), 'id'))]
              
                [query: .asBookmarkRef(.aqlFeatureAccess(.eContainer(.aqlFeatureAccess(FE, 'target'), NamedElement), 'name'), .aqlFeatureAccess(.eContainer(.aqlFeatureAccess(FE, 'target'), NamedElement), 'id'))]
              
            
        endfor
        
      else
        No involved elements
      endif
      
      Involving capabilities:
      
      if .greaterThan(->size(.aqlFeatureAccess(FC, 'involvingCapabilities')), 0) then
        
        for capability | .aqlFeatureAccess(FC, 'involvingCapabilities') do
          [query: .asBookmarkRef(.aqlFeatureAccess(capability, 'name'), .aqlFeatureAccess(capability, 'id'))]
        endfor
        
      else
        No involving capability
      endif
      
    endfor
    
  else
    No functional chain defined
  endif
  
  Description of Scenarios
  
  if .greaterThan(->size(.eAllContents(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'containedCapabilityPkg'), Scenario)), 0) then
    
    for scenario | .eAllContents(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'containedCapabilityPkg'), Scenario) do
      Scenario: 
      [query: .asBookmark(.aqlFeatureAccess(scenario, 'name'), .aqlFeatureAccess(scenario, 'id'))]
      Description:
      
      if .differs(.aqlFeatureAccess(scenario, 'description'), null) then
        [query: .fromHTMLBodyString(.aqlFeatureAccess(scenario, 'description'))]
      else
        No description
      endif
      
      Allocated capability:
      [query: .asBookmarkRef(.aqlFeatureAccess(.eContainer(scenario, NamedElement), 'name'), .aqlFeatureAccess(.eContainer(scenario, NamedElement), 'id'))]
      Representation:
      
      if .isRepresentationDescriptionName(scenario, 'Component Exchanges Scenario') then
        [query: .setWidth(->first(.asImageByRepresentationDescriptionName(scenario, 'Component Exchanges Scenario')), 400)]
      else
        
        if .isRepresentationDescriptionName(scenario, 'Functional Scenario') then
          [query: .setWidth(->first(.asImageByRepresentationDescriptionName(scenario, 'Functional Scenario')), 400)]
        endif
        
      endif
      
      Owned messages:
      
      if .greaterThan(->size(.aqlFeatureAccess(scenario, 'ownedMessages')), 0) then
        
        for message | .aqlFeatureAccess(scenario, 'ownedMessages') do
          [query: .aqlFeatureAccess(message, 'name')]
        endfor
        
      else
        No message
      endif
      
    endfor
    
  else
    No scenario defined
  endif
  
  Data definition
  
  for im | .asImageByRepresentationDescriptionName(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedDataPkg'), 'Class Diagram Blank') do
    [query: .setWidth(im, 400)]
  endfor
  
  
  for package | .aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedDataPkg') do
    [query: .aqlFeatureAccess(package, 'name')]
    
    if .greaterThan(->size(.aqlFeatureAccess(package, 'ownedExchangeItems')), 0) then
      Exchange items definition:
      
      for EI | .aqlFeatureAccess(package, 'ownedExchangeItems') do
        [query: .asBookmark(.aqlFeatureAccess(EI, 'name'), .aqlFeatureAccess(EI, 'id'))]
        
        if .greaterThan(->size(.aqlFeatureAccess(EI, 'ownedElements')), 0) then
          table
            row
              
                Owned element
              
                Element type
              
            
          
          for element | .aqlFeatureAccess(EI, 'ownedElements') do
            table
              row
                
                  [query: .aqlFeatureAccess(element, 'name')]
                
                  [
                  [query: .aqlFeatureAccess(.aqlFeatureAccess(element, 'type'), 'name')]
                  ]
                
              
          endfor
          
        else
          No contained elements
        endif
        
      endfor
      
    endif
    
    
    if .greaterThan(->size(.aqlFeatureAccess(package, 'ownedCollections')), 0) then
      Collections definition:
      table
        row
          
            Collection
          
            Collection type
          
        
      
      for collection | .aqlFeatureAccess(package, 'ownedCollections') do
        table
          row
            
              [query: .aqlFeatureAccess(collection, 'name')]
            
              [
              [query: .aqlFeatureAccess(.aqlFeatureAccess(collection, 'type'), 'name')]
              ]
            
          
      endfor
      
    endif
    
    
    if .greaterThan(->size(.aqlFeatureAccess(package, 'ownedClasses')), 0) then
      Classes definition:
      
      for class | .aqlFeatureAccess(package, 'ownedClasses') do
        [query: .aqlFeatureAccess(class, 'name')]
        
        if .greaterThan(->size(.aqlFeatureAccess(class, 'containedProperties')), 0) then
          table
            row
              
                Contained property
              
                Property type
              
            
          
          for prop | .aqlFeatureAccess(class, 'containedProperties') do
            table
              row
                
                  [query: .aqlFeatureAccess(prop, 'name')]
                
                  [
                  [query: .aqlFeatureAccess(.aqlFeatureAccess(prop, 'type'), 'name')]
                  ]
                
              
          endfor
          
        else
          No contained property
        endif
        
      endfor
      
    endif
    
    
    if .greaterThan(->size(.aqlFeatureAccess(package, 'ownedDataTypes')), 0) then
      Data types definition:
      
      for data | .aqlFeatureAccess(package, 'ownedDataTypes') do
        [query: .aqlFeatureAccess(data, 'name')]
      endfor
      
    endif
    
  endfor
  
  
  for package | .eAllContents(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedDataPkg'), DataPkg) do
    [query: .aqlFeatureAccess(package, 'name')]
    
    if .greaterThan(->size(.aqlFeatureAccess(package, 'ownedExchangeItems')), 0) then
      Exchange items definition:
      
      for EI | .aqlFeatureAccess(package, 'ownedExchangeItems') do
        [query: .asBookmark(.aqlFeatureAccess(EI, 'name'), .aqlFeatureAccess(EI, 'id'))]
        
        if .greaterThan(->size(.aqlFeatureAccess(EI, 'ownedElements')), 0) then
          table
            row
              
                Owned element
              
                Element type
              
            
          
          for element | .aqlFeatureAccess(EI, 'ownedElements') do
            table
              row
                
                  [query: .aqlFeatureAccess(element, 'name')]
                
                  [
                  [query: .aqlFeatureAccess(.aqlFeatureAccess(element, 'type'), 'name')]
                  ]
                
              
          endfor
          
        else
          	No contained elements
        endif
        
      endfor
      
    endif
    
    
    if .greaterThan(->size(.aqlFeatureAccess(package, 'ownedCollections')), 0) then
      Collections definition:
      table
        row
          
            Collection
          
            Collection type
          
        
      
      for collection | .aqlFeatureAccess(package, 'ownedCollections') do
        table
          row
            
              [query: .aqlFeatureAccess(collection, 'name')]
            
              [
              [query: .aqlFeatureAccess(.aqlFeatureAccess(collection, 'type'), 'name')]
              ]
            
          
      endfor
      
    endif
    
    
    if .greaterThan(->size(.aqlFeatureAccess(package, 'ownedClasses')), 0) then
      Classes definition:
      
      for class | .aqlFeatureAccess(package, 'ownedClasses') do
        [query: .aqlFeatureAccess(class, 'name')]
        
        if .greaterThan(->size(.aqlFeatureAccess(class, 'containedProperties')), 0) then
          table
            row
              
                Contained property
              
                Property type
              
            
          
          for prop | .aqlFeatureAccess(class, 'containedProperties') do
            table
              row
                
                  [query: .aqlFeatureAccess(prop, 'name')]
                
                  [
                  [query: .aqlFeatureAccess(.aqlFeatureAccess(prop, 'type'), 'name')]
                  ]
                
              
          endfor
          
        else
          No contained property
        endif
        
      endfor
      
    endif
    
    
    if .greaterThan(->size(.aqlFeatureAccess(package, 'ownedDataTypes')), 0) then
      Data types definition:
      
      for data | .aqlFeatureAccess(package, 'ownedDataTypes') do
        [query: .aqlFeatureAccess(data, 'name')]
      endfor
      
    endif
    
  endfor
  
=== FOOTER ===

  
  content control
  
  
=== TEMPLATES ===