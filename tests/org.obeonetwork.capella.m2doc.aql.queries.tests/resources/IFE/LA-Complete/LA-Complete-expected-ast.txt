
=== HEADER ===

  table
    row
      
        Architecture File of 
        [query: .aqlFeatureAccess(self, 'name')]
      
    
  
=== BODY ===

  Architecture File of 
  [query: .aqlFeatureAccess(self, 'name')]
  Document generated automatically by M2Doc from Capella model of the system
Table of Contents
  [query: .asPagination('newTableOfContent')]
  Descriptions of Logical Components
  
  for lc | .eAllContents(self, LogicalComponent) do
    Logical Component : 
    [query: .aqlFeatureAccess(lc, 'name')]
    
    if .differs(.size(.trim(.aqlFeatureAccess(lc, 'description'))), 0) then
      [query: .replaceLink(.fromHTMLBodyString(.trim(.aqlFeatureAccess(lc, 'description'))), lc)]
    else
      No description
    endif
    
    
    if .isRepresentationDescriptionName(lc, 'Logical Component Breakdown') then
      [query: .setWidth(->first(.asImageByRepresentationDescriptionName(lc, 'Logical Component Breakdown')), 400)]
    endif
    
    
    if .differs(->size(.aqlFeatureAccess(lc, 'realizedSystemComponents')), 0) then
      Realizing system components: 
      
      for systComp | .eContainerOrSelf(.aqlFeatureAccess(lc, 'realizedSystemComponents'), NamedElement) do
        [query: .aqlFeatureAccess(systComp, 'name')]
      endfor
      
    endif
    
    
    if .differs(->size(.aqlFeatureAccess(lc, 'realizingPhysicalComponents')), 0) then
      Realizing physical components: 
      
      for physComp | .eContainerOrSelf(.aqlFeatureAccess(lc, 'realizingPhysicalComponents'), NamedElement) do
        [query: .aqlFeatureAccess(physComp, 'name')]
      endfor
      
    endif
    
    
    if .differs(->size(.aqlFeatureAccess(lc, 'allocatedFunctions')), 0) then
      Allocated Functions 
      table
        row
          
            Function name
          
            Description
          
        
      
      for function | .aqlFeatureAccess(lc, 'allocatedFunctions') do
        table
          row
            
              [query: .aqlFeatureAccess(function, 'name')]
            
              [query: .replaceLink(.fromHTMLBodyString(.trim(.aqlFeatureAccess(function, 'description'))), function)]
            
          
      endfor
      
    endif
    
    
    if .differs(->size(.aqlFeatureAccess(->filter(.aqlFeatureAccess(lc, 'ownedFeatures'), ComponentPort), 'componentExchanges')), 0) then
      Component Exchanges
      
      for ce | .aqlFeatureAccess(->filter(.aqlFeatureAccess(lc, 'ownedFeatures'), ComponentPort), 'componentExchanges') do
        table
          row
            
              Name
            
              [query: .aqlFeatureAccess(ce, 'name')]
            
          row
            
              Direction
            
              [query: .getCeDirection(ce, lc)]
            
          row
            
              Destination Component
            
              [query: .getDestinationComponent(ce, lc)]
            
          
        
        if .differs(.size(.trim(.aqlFeatureAccess(ce, 'description'))), 0) then
          [query: .replaceLink(.fromHTMLBodyString(.trim(.aqlFeatureAccess(ce, 'description'))), ce)]
        else
          No description
        endif
        
      endfor
      
    endif
    
    
    for interface | .aqlFeatureAccess(lc, 'requiredInterfaces') do
      Required Interfaces  
      [query: .aqlFeatureAccess(interface, 'name')]
      [query: .replaceLink(.fromHTMLBodyString(.trim(.aqlFeatureAccess(interface, 'description'))), interface)]
    endfor
    
    
    for interface | .aqlFeatureAccess(lc, 'providedInterfaces') do
      Provided Interfaces  
      [query: .aqlFeatureAccess(interface, 'name')]
      [query: .replaceLink(.fromHTMLBodyString(.trim(.aqlFeatureAccess(interface, 'description'))), interface)]
    endfor
    
  endfor
  
  Descriptions of Logical Functions
  
  for f | .eAllContents(self, LogicalFunction) do
    Function : 
    [query: .aqlFeatureAccess(f, 'name')]
    Description:
    
    if .differs(.size(.trim(.aqlFeatureAccess(f, 'description'))), 0) then
      [query: .replaceLink(.fromHTMLBodyString(.trim(.aqlFeatureAccess(f, 'description'))), f)]
    else
      No description
    endif
    
    
    if .isRepresentationDescriptionName(f, 'Logical Data Flow Blank') then
      [query: .setWidth(.asImageByRepresentationDescriptionName(f, 'Logical Data Flow Blank'), 400)]
    endif
    
    Parent / Children functions:
    table
      row
        
          Parent function
        
          Current function
        
          Children functions
        
      row
        
          [query: .aqlFeatureAccess(.eContainer(f, NamedElement), 'name')]
        
          [query: .aqlFeatureAccess(f, 'name')]
        
          
          if .greaterThan(->size(.aqlFeatureAccess(f, 'subFunctions')), 0) then
            
            for children | .aqlFeatureAccess(f, 'subFunctions') do
              [query: .aqlFeatureAccess(children, 'name')]
            endfor
            
          else
            No children function
          endif
          
        
      
    List of inputs:
    
    if .greaterThan(->size(.aqlFeatureAccess(f, 'incoming')), 0) then
      table
        row
          
            Incoming functional exchange
          
            Exchanged items
          
        
      
      for fe | ->filter(.aqlFeatureAccess(f, 'incoming'), FunctionalExchange) do
        table
          row
            
              [query: .aqlFeatureAccess(fe, 'name')]
            
              
              if .greaterThan(->size(.aqlFeatureAccess(fe, 'exchangedItems')), 0) then
                
                for ei | .aqlFeatureAccess(fe, 'exchangedItems') do
                  [query: .aqlFeatureAccess(ei, 'name')]
                endfor
                
              else
                No exchanged item
              endif
              
            
          
      endfor
      
    else
      No input
    endif
    
    List of outputs:
    
    if .greaterThan(->size(.aqlFeatureAccess(f, 'outgoing')), 0) then
      table
        row
          
            Outgoing functional exchange
          
            Exchanged items
          
        
      
      for fe | ->filter(.aqlFeatureAccess(f, 'outgoing'), FunctionalExchange) do
        table
          row
            
              [query: .aqlFeatureAccess(fe, 'name')]
            
              
              if .greaterThan(->size(.aqlFeatureAccess(fe, 'exchangedItems')), 0) then
                
                for ei | .aqlFeatureAccess(fe, 'exchangedItems') do
                  [query: .aqlFeatureAccess(ei, 'name')]
                endfor
                
              else
                No exchanged item
              endif
              
            
          
      endfor
      
    else
      No output
    endif
    
    Participation to functional chains:
    
    if .greaterThan(->size(.aqlFeatureAccess(f, 'involvingFunctionalChains')), 0) then
      
      for FC | .aqlFeatureAccess(f, 'involvingFunctionalChains') do
        [query: .aqlFeatureAccess(FC, 'name')]
      endfor
      
    else
      None
    endif
    
    Allocated to:
    
    if .greaterThan(->size(.aqlFeatureAccess(f, 'allocationBlocks')), 0) then
      
      for sys | .aqlFeatureAccess(f, 'allocationBlocks') do
        [query: .aqlFeatureAccess(sys, 'name')]
      endfor
      
    else
      Function not allocated
    endif
    
    
  endfor
  
  Descriptions of Interfaces and Data
  
  for im | .asImageByRepresentationDescriptionName(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedDataPkg'), 'Class Diagram Blank') do
    [query: .setWidth(im, 400)]
  endfor
  
  
  for package | .aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedDataPkg') do
    [query: .aqlFeatureAccess(package, 'name')]
    
    if .greaterThan(->size(.aqlFeatureAccess(package, 'ownedExchangeItems')), 0) then
      Exchange items definition:
      
      for EI | .aqlFeatureAccess(package, 'ownedExchangeItems') do
        [query: .asBookmark(.aqlFeatureAccess(EI, 'name'), .aqlFeatureAccess(EI, 'id'))]
        
        if .greaterThan(->size(.aqlFeatureAccess(EI, 'ownedElements')), 0) then
          table
            row
              
                Owned element
              
                Element type
              
            
          
          for element | .aqlFeatureAccess(EI, 'ownedElements') do
            table
              row
                
                  [query: .aqlFeatureAccess(element, 'name')]
                
                  [
                  [query: .aqlFeatureAccess(.aqlFeatureAccess(element, 'type'), 'name')]
                  ]
                
              
          endfor
          
        else
          No contained elements
        endif
        
      endfor
      
    endif
    
    
    if .greaterThan(->size(.aqlFeatureAccess(package, 'ownedCollections')), 0) then
      Collections definition:
      table
        row
          
            Collection
          
            Collection type
          
        
      
      for collection | .aqlFeatureAccess(package, 'ownedCollections') do
        table
          row
            
              [query: .aqlFeatureAccess(collection, 'name')]
            
              [
              [query: .aqlFeatureAccess(.aqlFeatureAccess(collection, 'type'), 'name')]
              ]
            
          
      endfor
      
    endif
    
    
    if .greaterThan(->size(.aqlFeatureAccess(package, 'ownedClasses')), 0) then
      Classes definition:
      
      for class | .aqlFeatureAccess(package, 'ownedClasses') do
        [query: .aqlFeatureAccess(class, 'name')]
        
        if .greaterThan(->size(.aqlFeatureAccess(class, 'containedProperties')), 0) then
          table
            row
              
                Contained property
              
                Property type
              
            
          
          for prop | .aqlFeatureAccess(class, 'containedProperties') do
            table
              row
                
                  [query: .aqlFeatureAccess(prop, 'name')]
                
                  [
                  [query: .aqlFeatureAccess(.aqlFeatureAccess(prop, 'type'), 'name')]
                  ]
                
              
          endfor
          
        else
          No contained property
        endif
        
      endfor
      
    endif
    
    
    if .greaterThan(->size(.aqlFeatureAccess(package, 'ownedDataTypes')), 0) then
      Data types definition:
      
      for data | .aqlFeatureAccess(package, 'ownedDataTypes') do
        [query: .aqlFeatureAccess(data, 'name')]
      endfor
      
    endif
    
  endfor
  
  
  for package | .eAllContents(.aqlFeatureAccess(.aqlFeatureAccess(self, 'containedSystemAnalysis'), 'ownedDataPkg'), DataPkg) do
    [query: .aqlFeatureAccess(package, 'name')]
    
    if .greaterThan(->size(.aqlFeatureAccess(package, 'ownedExchangeItems')), 0) then
      Exchange items definition:
      
      for EI | .aqlFeatureAccess(package, 'ownedExchangeItems') do
        [query: .asBookmark(.aqlFeatureAccess(EI, 'name'), .aqlFeatureAccess(EI, 'id'))]
        
        if .greaterThan(->size(.aqlFeatureAccess(EI, 'ownedElements')), 0) then
          table
            row
              
                Owned element
              
                Element type
              
            
          
          for element | .aqlFeatureAccess(EI, 'ownedElements') do
            table
              row
                
                  [query: .aqlFeatureAccess(element, 'name')]
                
                  [
                  [query: .aqlFeatureAccess(.aqlFeatureAccess(element, 'type'), 'name')]
                  ]
                
              
          endfor
          
        else
          No contained elements
        endif
        
      endfor
      
    endif
    
    
    if .greaterThan(->size(.aqlFeatureAccess(package, 'ownedCollections')), 0) then
      Collections definition:
      table
        row
          
            Collection
          
            Collection type
          
        
      
      for collection | .aqlFeatureAccess(package, 'ownedCollections') do
        table
          row
            
              [query: .aqlFeatureAccess(collection, 'name')]
            
              [
              [query: .aqlFeatureAccess(.aqlFeatureAccess(collection, 'type'), 'name')]
              ]
            
          
      endfor
      
    endif
    
    
    if .greaterThan(->size(.aqlFeatureAccess(package, 'ownedClasses')), 0) then
      Classes definition:
      
      for class | .aqlFeatureAccess(package, 'ownedClasses') do
        [query: .aqlFeatureAccess(class, 'name')]
        
        if .greaterThan(->size(.aqlFeatureAccess(class, 'containedProperties')), 0) then
          table
            row
              
                Contained property
              
                Property type
              
            
          
          for prop | .aqlFeatureAccess(class, 'containedProperties') do
            table
              row
                
                  [query: .aqlFeatureAccess(prop, 'name')]
                
                  [
                  [query: .aqlFeatureAccess(.aqlFeatureAccess(prop, 'type'), 'name')]
                  ]
                
              
          endfor
          
        else
          No contained property
        endif
        
      endfor
      
    endif
    
    
    if .greaterThan(->size(.aqlFeatureAccess(package, 'ownedDataTypes')), 0) then
      Data types definition:
      
      for data | .aqlFeatureAccess(package, 'ownedDataTypes') do
        [query: .aqlFeatureAccess(data, 'name')]
      endfor
      
    endif
    
  endfor
  
  
=== FOOTER ===

  
  content control
  
  
=== TEMPLATES ===